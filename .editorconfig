root = true
#################
# Common Settings
#################

# This file is the top-most EditorConfig file

# All Files
[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

#########################
# File Extension Settings
#########################

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Makefiles
[{Makefile,**.mk,rules}]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml,xsd,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON Files
[*.{json,json5}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,ts,tsx,css,sass,scss,less,svg,vue}]
indent_size = 2
insert_final_newline = true


# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected internal, private protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
#dotnet_naming_style.static_field_style.required_prefix = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# CSharp code style settings:
[*.cs]
# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Spacing
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_around_binary_operators = before_and_after
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = false
csharp_preserve_single_line_statements = true

# Other
place_abstract_accessorholder_on_single_line = true
place_simple_accessorholder_on_single_line = true
place_accessor_with_attrs_holder_on_single_line = true
place_simple_initializer_on_single_line = false
place_accessorholder_attribute_on_same_line = false

max_line_length = 140
resharper_csharp_max_line_length = 140


# All Rules with default action
# Description: All Rules with default action. Rules with IsEnabledByDefault = false are disabled.

# Code files
[*.{cs,vb}]
# Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = error
# Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = error
# Use generic event handler instances
dotnet_diagnostic.CA1003.severity = none
# Enums should have zero value
dotnet_diagnostic.CA1008.severity = none
# Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = error
# Abstract types should not have constructors
dotnet_diagnostic.CA1012.severity = none
# Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = none
# Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = error
# Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = none
# Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = error
# Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = none
# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none
# Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = none
# Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = error
# Use events where appropriate
dotnet_diagnostic.CA1030.severity = error
# Do not catch general exception types
dotnet_diagnostic.CA1031.severity = error
# Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = error
# Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = none
# Nested types should not be visible
dotnet_diagnostic.CA1034.severity = error
# Override methods on comparable types
dotnet_diagnostic.CA1036.severity = error
# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = error
# Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = error
# Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = error
# Properties should not be write only
dotnet_diagnostic.CA1044.severity = error
# Declare types in namespaces
dotnet_diagnostic.CA1050.severity = none
# Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = error
# Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = error
# Uri parameters should not be strings
dotnet_diagnostic.CA1054.severity = error
# Uri return values should not be strings
dotnet_diagnostic.CA1055.severity = error
# Uri properties should not be strings
dotnet_diagnostic.CA1056.severity = error
# Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = error
# Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = none
# Do not hide base class methods
dotnet_diagnostic.CA1061.severity = error
# Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none
# Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = error
# Exceptions should be public
dotnet_diagnostic.CA1064.severity = error
# Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = error
# Type {0} should implement IEquatable<T> because it overrides Equals
dotnet_diagnostic.CA1066.severity = error
# Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = error
# CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = error
# Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = error
# Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none
# Specify CultureInfo
dotnet_diagnostic.CA1304.severity = error
# Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = error
# Specify StringComparison
dotnet_diagnostic.CA1307.severity = error
# Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = error
# Use ordinal stringcomparison
dotnet_diagnostic.CA1309.severity = none
# P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = error
# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = none
# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning
# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning
# Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning
# Use nameof to express symbol names
dotnet_diagnostic.CA1507.severity = error
# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning
# Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = none
# Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = error
# Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = none
# Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = error
# Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = none
# Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = error
# Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = error
# Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = error
# Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = error
# Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = error
# Identifier contains type name
dotnet_diagnostic.CA1720.severity = error
# Property names should not match get methods
dotnet_diagnostic.CA1721.severity = error
# Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = error
# Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = none
# Review unused parameters
dotnet_diagnostic.CA1801.severity = error
# Use literals where appropriate
dotnet_diagnostic.CA1802.severity = error
# Do not ignore method results
dotnet_diagnostic.CA1806.severity = error
# Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = error
# Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = error
# Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = none
# Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = error
# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = error
# Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1816.severity = error
# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = error
# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = error
# Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = error
# Mark members as static
dotnet_diagnostic.CA1822.severity = error
# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = error
# Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = error
# Avoid zero-length array allocations.
dotnet_diagnostic.CA1825.severity = error
# Do not use Enumerable methods on indexable collections. Instead use the collection directly
dotnet_diagnostic.CA1826.severity = error
# Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = error
# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = error
# Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = error
# Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = error
# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = error
# Always consume the value returned by methods marked with PreserveSigAttribute
dotnet_diagnostic.CA2010.severity = error
# Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = error
# Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = error
# Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = error
# Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = error
# Rethrow to preserve stack details.
dotnet_diagnostic.CA2200.severity = error
# Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = none
# Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = error
# Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = error
# Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = error
# Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = error
# Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = error
# Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = error
# Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = none
# Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = error
# Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2219.severity = error
# Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = error
# Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = error
# Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = error
# Collection properties should be read only
dotnet_diagnostic.CA2227.severity = error
# Implement serialization constructors
dotnet_diagnostic.CA2229.severity = error
# Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = error
# Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = error
# Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = error
# Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = error
# Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = error
# Test for NaN correctly
dotnet_diagnostic.CA2242.severity = error
# Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = error
# Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = error
# Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = none
# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = none
# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = none
# Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = none
# Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = none
# Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = none
# Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = none
# Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = none
# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = none
# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = none
# Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = none
# Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = none
# Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = none
# Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = none
# Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = none
# Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = none
# Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = none
# Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = none
# Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = none
# Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = none
# Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = none
# Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = none
# Do Not Add Schema By URL
dotnet_diagnostic.CA3061.severity = error
# Insecure DTD processing in XML
dotnet_diagnostic.CA3075.severity = error
# Insecure XSLT script processing.
dotnet_diagnostic.CA3076.severity = error
# Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3077.severity = error
# Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA3147.severity = error
# Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = error
# Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = error
# Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5358.severity = none
# Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = error
# Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5360.severity = error
# Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5361.severity = error
# Do Not Refer Self In Serializable Class
dotnet_diagnostic.CA5362.severity = none
# Do Not Disable Request Validation
dotnet_diagnostic.CA5363.severity = error
# Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5364.severity = error
# Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = error
# Use XmlReader For DataSet Read Xml
dotnet_diagnostic.CA5366.severity = error
# Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5367.severity = none
# Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = error
# Use XmlReader For Deserialize
dotnet_diagnostic.CA5369.severity = error
# Use XmlReader For Validating Reader
dotnet_diagnostic.CA5370.severity = error
# Use XmlReader For Schema Read
dotnet_diagnostic.CA5371.severity = error
# Use XmlReader For XPathDocument
dotnet_diagnostic.CA5372.severity = error
# Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = error
# Do Not Use XslTransform
dotnet_diagnostic.CA5374.severity = error
# Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5375.severity = none
# Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = error
# Use Container Level Access Policy
dotnet_diagnostic.CA5377.severity = error
# Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = error
# Do Not Use Weak Key Derivation Function Algorithm
dotnet_diagnostic.CA5379.severity = error
# Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5380.severity = error
# Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5381.severity = error
# Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5382.severity = none
# Ensure Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5383.severity = none
# Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5384.severity = error
# Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size
dotnet_diagnostic.CA5385.severity = error
# Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = none
# Analyzer version mismatch
dotnet_diagnostic.CA9999.severity = error

# SonarLint
dotnet_diagnostic.S4586.severity = error
dotnet_diagnostic.S112.severity = error
